
---------------------------------------
2016년 1학기 STL
Wed May 25 10:59:04 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 05월 25일
//
// 연산자 하나만 이용해서 순서를 정하는 것을 strictly weak ordering
// 368Page
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include "save.h"

using namespace std;

class Game {
	int hp;
	int mp;
public:
	Game( int hp, int mp ) : hp( hp ), mp( mp ) {}
	bool operator<( const Game& other ) const
	{
		return other.hp < hp;
	}
};

int main() {
	set<Game> s{ {100, 50}, {70, 50}, {100, 20} };
	// set은 빠른 검색을 하기 위해 사용한다.
	// set에서 원하는 값을 찾아보자
	auto p = s.find( Game( 70, 50 ) );

	if ( p != s.end() )
		cout << "찾음" << endl;

	// 두 원소가 같은 지를 <연산자를 이용하여 결정한다. --> 동등성(equivalence)
	// 실제 두 원소가 같은지 비교는 == 연산자로 결정 --> 상등성(equality)

	save();
}
---------------------------------------
2016년 1학기 STL
Wed May 25 11:37:00 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 05월 25일
//
// 연산자 하나만 이용해서 순서를 정하는 것을 strictly weak ordering
// 368Page
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include "save.h"

using namespace std;
/*
 검색 관련 함수들 - 전역 알고리즘 함수들임

 count - 찾는 값이 몇개나 있는가?
 find - 찾는 값이 처음 발견된 곳은 어디인가?
		--> 선형알고리즘, count는 무조건 끝까지 진행

컨테이너가 정렬된 경우에 (vector, deque)
원하는 값이 있는가?
	binary_search - STL에서는 bool을 return

있다면 어디에 있는가? 몇개나 있는가?
--> equal_range가 정답
lower_bound - 원하는 값이 있는가? 있다면 어디애? 없다면 어디에 삽입 가능한가를 알려줌
upper_bound - 정렬된 범위에 삽입할 때 동등한 객체들의 순서 유지에 사용 가능
equal_range - 반환값은 pair(lower/upper)

set/map 에서는 멤버함수를 이용한다.

----------------------------------------------
 -100 ~ 100 사이의 랜덤 정수 100개를 벡터에 저장하자.
 특정한 값을 찾아 봅시다. ex) 33
 find()로 찾을 수 있었다.

 벡터가 정렬되어 있다면 binary_search()로 찾아야 합니다.
----------------------------------------------
*/
int main() {
	vector<int> v;
	v.reserve( 100 );

	for ( int i = 0; i < 100; ++i )
		v.push_back( rand() % 201 - 100 );

	auto p = find( v.begin(), v.end(), 33 );

	if ( p != v.end() )
		cout << "찾음" << endl;
	else
		cout << "없음" << endl;

	sort( v.begin(), v.end() );

	bool d = binary_search( v.begin(), v.end(), 32 );
	// 32를 찾기 이전 이미 정렬이 되어있으므로 find가 아닌 binary_search를 이용한 이진탐색을 하자.
	if ( d == true )
		cout << "찾음" << endl;
	else
		cout << "없음" << endl;
	//auto d = count( v.begin(), v.end(), 32 );
	//cout << d << endl;

	for ( auto d : v )
		cout << d << "\t";
	cout << endl;
	save();
}
---------------------------------------
2016년 1학기 STL
Wed May 25 11:50:11 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 05월 25일
//
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include "save.h"

using namespace std;
/*
439쪽 그 외 STL 컨테이너
STL 알고리즘과 함께 어울려 작동하는 컨테이너를 만들 수 있는 방법은?

1. STL 컨테이너가 요구하는 인터페이스를 제공한다.
	- string을 stl 컨테이너로 이용하는 경우를 말한다.
	- string은 begin(), end(), push_back()등을 제공한다.
2. 컨테이너와 알고리즘간의 인터페이스를 담당하는 객체를 제공한다(반복자)
	기존 배열
	반복자는 포린터에 대하여 특수화(specializtion)되어 있으므로
*/
int main() {
	int a[]{ 1, 3, 5, 2, 4 };
	sort( &a[0], &a[5] );

	for ( int d : a )
		cout << d;
	cout << endl;
	save();
}
---------------------------------------
2016년 1학기 STL
Wed May 25 12:04:24 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 05월 25일
//
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>
#include "save.h"

using namespace std;
/*
439쪽 그 외 STL 컨테이너
STL 알고리즘과 함께 어울려 작동하는 컨테이너를 만들 수 있는 방법은?

1. STL 컨테이너가 요구하는 인터페이스를 제공한다.
	- string을 stl 컨테이너로 이용하는 경우를 말한다.
	- string은 begin(), end(), push_back()등을 제공한다.
2. 컨테이너와 알고리즘간의 인터페이스를 담당하는 객체를 제공한다(반복자)
	기존 배열
	반복자는 포린터에 대하여 특수화(specializtion)되어 있으므로
3. wrapper 클래스를 직접 만들어 사용한다.

------------------------------------------------------------------------------------------
표준을 준수하는 컨테이너를 만들어 보자.

ItemBox 컨테이너 - 특별히 하는 일 없는 array<T, size>와 비슷한 컨테이너
------------------------------------------------------------------------------------------
*/
template <class T, int n>
class ItemBox {
	T data[n];
public:
	T* begin() {
		return data;
		//return data;
	};
	T* end() {
		return data + n;
	}
	size_t size() {
		return n;
	};
};

int main() {
	ItemBox<int, 10> a;
	auto p = a.begin();
	for ( int i = 0; i < a.size(); ++i )
		*p++ = i + 1;

	copy( a.begin(), a.end(), ostream_iterator<int>( cout, " " ) );
	cout << endl;
	save();
}
---------------------------------------
2016년 1학기 STL
Wed May 25 12:10:14 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 05월 25일
//
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>
#include "save.h"

using namespace std;
/*
439쪽 그 외 STL 컨테이너
STL 알고리즘과 함께 어울려 작동하는 컨테이너를 만들 수 있는 방법은?

1. STL 컨테이너가 요구하는 인터페이스를 제공한다.
	- string을 stl 컨테이너로 이용하는 경우를 말한다.
	- string은 begin(), end(), push_back()등을 제공한다.
2. 컨테이너와 알고리즘간의 인터페이스를 담당하는 객체를 제공한다(반복자)
	기존 배열
	반복자는 포린터에 대하여 특수화(specializtion)되어 있으므로
3. wrapper 클래스를 직접 만들어 사용한다.

------------------------------------------------------------------------------------------
표준을 준수하는 컨테이너를 만들어 보자.

ItemBox 컨테이너 - 특별히 하는 일 없는 array<T, size>와 비슷한 컨테이너
------------------------------------------------------------------------------------------
*/
template <class T, int n>
class ItemBox {
	T data[n];
public:
	T* begin() {
		return data;
		//return data;
	};
	T* end() {
		return data + n;
	}
	size_t size() {
		return n;
	};
};

int main() {
	ItemBox<int, 10> a;
	auto p = a.begin();
	for ( int i = 0; i < a.size(); ++i )
		*p++ = i + 1;

	copy( a.begin(), a.end(), ostream_iterator<int>( cout, " " ) );
	cout << endl;

	//내림차순으로 정렬해보자

	sort( a.begin(), a.end(), []( int a, int b ) {
		return a > b;
	} );

	for ( int d : a )
		cout << d << " ";
	cout << endl;

	save();
}
---------------------------------------
2016년 1학기 STL
Wed May 25 12:12:29 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 05월 25일
//
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>
#include "save.h"

using namespace std;
/*
439쪽 그 외 STL 컨테이너
STL 알고리즘과 함께 어울려 작동하는 컨테이너를 만들 수 있는 방법은?

1. STL 컨테이너가 요구하는 인터페이스를 제공한다.
	- string을 stl 컨테이너로 이용하는 경우를 말한다.
	- string은 begin(), end(), push_back()등을 제공한다.
2. 컨테이너와 알고리즘간의 인터페이스를 담당하는 객체를 제공한다(반복자)
	기존 배열
	반복자는 포린터에 대하여 특수화(specializtion)되어 있으므로
3. wrapper 클래스를 직접 만들어 사용한다.

------------------------------------------------------------------------------------------
표준을 준수하는 컨테이너를 만들어 보자.

ItemBox 컨테이너 - 특별히 하는 일 없는 array<T, size>와 비슷한 컨테이너
------------------------------------------------------------------------------------------
*/
template <class T, int n>
class ItemBox {
	T data[n];
public:
	T* begin() {
		return data;
		//return data;
	};
	T* end() {
		return data + n;
	}
	size_t size() {
		return n;
	};
};

int main() {
	ItemBox<int, 10> a;
	auto p = a.begin();
	for ( int i = 0; i < a.size(); ++i )
		*p++ = i + 1;

	copy( a.begin(), a.end(), ostream_iterator<int>( cout, " " ) );
	cout << endl;

	//내림차순으로 정렬해보자

	sort( a.begin(), a.end(), []( int a, int b ) {
		return a > b;
	} );

	for ( int d : a )
		cout << d << " ";
	cout << endl;

	// 원소의 순서를 순환, rotate
	rotate( a.begin(), a.begin() + 2, a.end() );

	for ( int d : a )
		cout << d << " ";
	cout << endl;

	save();
}