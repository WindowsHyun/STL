
---------------------------------------
2016년 1학기 STL
Wed Mar 16 12:11:00 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 03월 16일
// c++ Class 복습
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include "save.h"
using namespace std;

class Model {
	char* data{ nullptr };	// 표준 초기값 Null포인터
	size_t size{ 0 };
public:
	Model() {}; // 디폴트 생성자
	Model(int n) : size(n) {
		data = new char[size];
	}

	Model(const Model& other) : size(other.size) {		// 복사 생성자
		// 대입연산자를 만들었다면 복사생성을 간단하게 다음과 같이 사용할수 있다.
		*this = other;
		/*
		data = new char[size];
		// 데이터를 복사해온다
		memcpy(data, other.data, size);
		*/
	}

	~Model() { // 소멸자
		if (data != nullptr)
			delete[] data;
	}

	// 대입 연산자(assignment operator)
	Model& operator=(const Model& other) {
		// 자기 자신을 대입한다면 아무것도 안해도 된다.
		if (this == &other)
			return *this;
		// 내가 만든 메모리를 먼저 지워야 한다.
		if (data != nullptr)
			delete[] data;
		// 대입할 메모리와 같은 내용으로 만든다.
		size = other.size;
		data = new char[size];
		memcpy(data, other.data, size);
		return *this;
	}
};

int main() {
	Model a;
	Model b(1000); // 1000바이트 활당
	Model c(b);		// 복사 생성 c = b 랑 똑같다.
	/*
	복사 생성자를 안할시 c가 b의 원본을 지워지기 때문에
	b가 지워질때 이미 c가 지워버려서 문제가 생김.
	그러므로 복사 생성자를 통해 c를 새롭게 만든다.
	*/
	a = c;		// 대입 연산자
	/*
	a는 이미 자료를 가지고 있는데 그 자료에다가 c를 덮으려고 한다.
	그러기 위해서는 a의 자료를 지우고 다시 새롭게 c를 복사해서 만들어줘여한다.
	*/

	save();
}
---------------------------------------
2016년 1학기 STL
Wed Mar 16 12:18:15 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 03월 16일
// c++ Class 복습
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include "save.h"
using namespace std;

int gid{ 0 };

class Model {
	char* data{ nullptr };	// 표준 초기값 Null포인터
	size_t size{ 0 };
	int id;
public:
	Model() {
		id = gid++;
		cout << id << " 기본 생성자" << endl;
	};
	//Model() {}; // 디폴트 생성자
	Model(int n) : size(n) {
		id = gid++;
		data = new char[size];
		cout << id << " 생성자(크기)" << size << endl;
	}

	Model(const Model& other) : size(other.size) {		// 복사 생성자
		// 대입연산자를 만들었다면 복사생성을 간단하게 다음과 같이 사용할수 있다.
		id = gid++;
		*this = other;
		cout << id << " 복사생성자(크기)" << size << endl;
		/*
		data = new char[size];
		// 데이터를 복사해온다
		memcpy(data, other.data, size);
		*/
	}

	~Model() { // 소멸자
		if (data != nullptr)
			delete[] data;
		cout << id << " 소멸자(크기)" << size << endl;
	}

	// 대입 연산자(assignment operator)
	Model& operator=(const Model& other) {
		// 자기 자신을 대입한다면 아무것도 안해도 된다.
		if (this == &other)
			return *this;
		// 내가 만든 메모리를 먼저 지워야 한다.
		if (data != nullptr)
			delete[] data;
		// 대입할 메모리와 같은 내용으로 만든다.
		size = other.size;
		data = new char[size];
		memcpy(data, other.data, size);
		cout << id << " 대입연사자(크기)" << size << endl;
		return *this;
	}
};

int main() {
	Model a;

	 Model b(1000); // 1000바이트 활당
	 Model c(b);		// 복사 생성 c = b 랑 똑같다.


	/*
	복사 생성자를 안할시 c가 b의 원본을 지워지기 때문에
	b가 지워질때 이미 c가 지워버려서 문제가 생김.
	그러므로 복사 생성자를 통해 c를 새롭게 만든다.
	*/


	a = c;		// 대입 연산자


	/*
	a는 이미 자료를 가지고 있는데 그 자료에다가 c를 덮으려고 한다.
	그러기 위해서는 a의 자료를 지우고 다시 새롭게 c를 복사해서 만들어줘여한다.
	*/

	save();
}
---------------------------------------
2016년 1학기 STL
Wed Mar 16 12:20:17 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 03월 16일
// c++ Class 복습
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include "save.h"
using namespace std;

int gid{ 0 };

class Model {
	char* data{ nullptr };	// 표준 초기값 Null포인터
	size_t size{ 0 };
	int id;
public:
	Model() {
		id = gid++;
		cout << id << " 기본 생성자" << endl;
	};
	//Model() {}; // 디폴트 생성자
	Model(int n) : size(n) {
		id = gid++;
		data = new char[size];
		cout << id << " 생성자(크기)" << size << endl;
	}

	Model(const Model& other) : size(other.size) {		// 복사 생성자
		// 대입연산자를 만들었다면 복사생성을 간단하게 다음과 같이 사용할수 있다.
		id = gid++;
		*this = other;
		cout << id << " 복사생성자(크기)" << size << endl;
		/*
		data = new char[size];
		// 데이터를 복사해온다
		memcpy(data, other.data, size);
		*/
	}

	~Model() { // 소멸자
		if (data != nullptr)
			delete[] data;
		cout << id << " 소멸자(크기)" << size << endl;
	}

	// 대입 연산자(assignment operator)
	Model& operator=(const Model& other) {
		// 자기 자신을 대입한다면 아무것도 안해도 된다.
		if (this == &other)
			return *this;
		// 내가 만든 메모리를 먼저 지워야 한다.
		if (data != nullptr)
			delete[] data;
		// 대입할 메모리와 같은 내용으로 만든다.
		size = other.size;
		data = new char[size];
		memcpy(data, other.data, size);
		cout << id << " 대입연사자(크기)" << size << endl;
		return *this;
	}
};

int main() {

	{
		Model d{ 100 };// 지역생성자는 지역이 먼저 삭제된다.
	}

	Model a;

	Model b(1000); // 1000바이트 활당
	Model c(b);		// 복사 생성 c = b 랑 똑같다.


   /*
   복사 생성자를 안할시 c가 b의 원본을 지워지기 때문에
   b가 지워질때 이미 c가 지워버려서 문제가 생김.
   그러므로 복사 생성자를 통해 c를 새롭게 만든다.
   */


	a = c;		// 대입 연산자


	/*
	a는 이미 자료를 가지고 있는데 그 자료에다가 c를 덮으려고 한다.
	그러기 위해서는 a의 자료를 지우고 다시 새롭게 c를 복사해서 만들어줘여한다.
	*/

	save();
}