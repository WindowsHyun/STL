
---------------------------------------
2016년 1학기 STL
Mon Apr 11 11:05:17 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 04월 11일
//
// 6장
// 표준 템플릿 라이브러리(STL)
//
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include<string>
#include<algorithm>
#include<random>
#include "save.h"

using namespace std;

// pair<string, int> 인 자료를 vector에 넣어 관리하고 싶다.
using Score = pair<string, int>;


int main() {
	vector<Score> v;
	char buf[10];
	v.reserve(10000);		// 메모리가 10000개를 미리 확보
	default_random_engine dre;
	uniform_int_distribution <>ui(0, 10000);

	//array<Score, 10000> v2; // 스택에 생겨서 무한대로 만들수가 없다.
	// Score 데이터를 1만개 넣어보자
	for (int i = 0; i < 10000; ++i) {
		v.push_back(make_pair(string("이름") + itoa(i + 1, buf, 10), ui(dre)));
	}

	//for (auto d : v) {
	//	cout << d.first << " --> " << d.second << endl;
	//}

	// 1만개 중에서 원하는 점수가 있는지 찾아보자
	vector<Score>::iterator p = find_if(v.begin(), v.end(), [](const Score& a) {
		if (a.second == 3500)
			return true;
		return false;
	});

	if (p != v.end()) {
		//이건 찾은거다
		auto f = p - v.begin();
		/*
		cout << "찾았다!  --> " << f << endl;
		cout << v[f].first << " --> " << v[f].second << endl;
		*/
		// 앞뒤로 10개씩 나타내 보자.
		for (int i = f - 10; i < f + 10; ++i) {
			if (i == f)
				cout << "*";
			cout << v[i].first << " --> " << v[i].second << endl;
		}

	}
	else {
		//이건 못찾은거다
	}


	save();
}
---------------------------------------
2016년 1학기 STL
Mon Apr 11 11:38:08 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 04월 11일
//
// 6장
// 표준 템플릿 라이브러리(STL)
//
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include<string>
#include<algorithm>
#include<random>
#include "save.h"

using namespace std;

class April {
public:
	April() {
		cout << "생성자" << endl;
	}
	April(const April&) {
		cout << "복사생성자" << endl;
	}
	April(const April&&) {
		cout << "이동생성자" << endl;
	}
	~April() {
		cout << "소멸자" << endl;
	}
};

int main() {
	vector<April> v;

	April a;
	v.push_back(a);
	v.push_back(a);

	cout << "-- End of session --" << endl;
	save();
}
---------------------------------------
2016년 1학기 STL
Mon Apr 11 11:44:55 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 04월 11일
//
// 6장
// 표준 템플릿 라이브러리(STL)
//
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include<string>
#include<algorithm>
#include<random>
#include "save.h"

using namespace std;

class April {
public:
	April() {
		cout << "생성자" << endl;
	}
	April(const April&) {
		cout << "복사생성자" << endl;
	}
	April(const April&&) {
		cout << "이동생성자" << endl;
	}
	~April() {
		cout << "소멸자" << endl;
	}
};

int main() {
	vector<April> v;
	v.reserve(100);

	v.emplace_back();
	v.emplace_back();

	cout << "-- End of session --" << endl;
	save();
}
---------------------------------------
2016년 1학기 STL
Mon Apr 11 12:05:53 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 04월 11일
//
// 6장
// 표준 템플릿 라이브러리(STL)
//
//---------------------------------------------------------------------------
#include <iostream>
#include <list>
#include "save.h"

using namespace std;


int main() {
	// 리스트에 a ~ z를 넣어보자. 출력도 해보고 특징을 알아보자
	/*
	list<char> cont;
	for (int i = 97; i < 123; ++i) {
		cont.push_back(i);
	}

	for( char c = 'a'; c <= 'z'; ++c)
	cont.push_back(c);

	for (auto d : cont) {
		cout << d << " ";
	}
	*/
	string s("abcdefghizklmnopqrstuvwxyz");
	list<char> cont(s.begin(), s.end());

	// 'o' 위치에 3번 'A' , 'B', 'C'를 사입해 보자.
	auto p = find(cont.begin(), cont.end(), 'o');
	cont.insert(p, 'A');
	cont.insert(p, 'B');
	cont.insert(p, 'C');

	for (auto i = cont.begin(); i != cont.end(); ++i) {
		cout << *i << " ";
	}


	save();
}
---------------------------------------
2016년 1학기 STL
Mon Apr 11 12:16:56 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 04월 11일
//
// 6장
// 표준 템플릿 라이브러리(STL)
//
//---------------------------------------------------------------------------
#include <iostream>
#include <set>
#include <random>
#include "save.h"

using namespace std;


int main() {
	// 연관 컨테이너 set<int>에 랜덤정수 100개 넣고 출력해보자
	set<int> s;

	for (int i = 0; i < 100; ++i)
		s.insert(rand());

	for (set<int>::const_iterator i = s.begin(); i != s.end(); ++i) {
		cout << *i << "\t";
	}

	/*
	uniform_int_distribution <>ui(0,1000);
	default_random_engine dre;

	for (int i = 0; i < 100; ++i)
	s.insert(ui(dre));

	for (auto iter = s.begin(); iter != s.end(); ++iter) {
		cout << *iter << " ";
	}
	*/
	save();
}
---------------------------------------
2016년 1학기 STL
Mon Apr 11 12:18:32 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 04월 11일
//
// 6장
// 표준 템플릿 라이브러리(STL)
//
//---------------------------------------------------------------------------
#include <iostream>
#include <set>
#include <random>
#include "save.h"

using namespace std;


int main() {
	// 연관 컨테이너 set<int>에 랜덤정수 100개 넣고 출력해보자
	set<int> s;

	for (int i = 0; i < 100; ++i)
		s.insert(rand());

	for (set<int>::const_iterator i = s.begin(); i != s.end(); ++i) {
		cout << *i << "\t";
	}

	auto p = find(s.begin(), s.end(), 32757);
	if (p != s.end()) {
		//찾음
		cout << *p << endl;
	}
	else {
		// 못찾음
	}

	/*
	uniform_int_distribution <>ui(0,1000);
	default_random_engine dre;

	for (int i = 0; i < 100; ++i)
	s.insert(ui(dre));

	for (auto iter = s.begin(); iter != s.end(); ++iter) {
		cout << *iter << " ";
	}
	*/
	save();
}