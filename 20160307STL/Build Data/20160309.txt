
---------------------------------------
2016년 1학기 STL
Wed Mar  9 10:44:37 2016
---------------------------------------

#include <iostream>
#include <stdlib.h>
#include "save.h"
using namespace std;

#define MAX_COUNT 10

int f(const void* a, const void* b){
	int x = *(int*)a;
	int y = *(int*)b;
	if (x > y)
		return 1;
	if (x < y)
		return -1;
	return 0;
}
int compare(const void *first, const void *second);

int main(){
	int a[] = { 2, 4, 6, 8, 10, 1, 3, 5, 7, 9 };

	// c함수 qsort를 이용하여 a를 정렬하시오.

	// 지금 test를 main() 안에서 선안한 후 qsort로 넘겨봐라
	/*
	int f(const void*, const void*);
	*/ 
	int (*test)(const void*, const void*) = f; // 함수 포인터!


	qsort(a, 10, 4, test);
	//qsort(a, MAX_COUNT, sizeof(a[0]), compare);

	for (auto d : a)
		cout << d << " "; // 오름차순 정렬
	cout << endl;
	save();
}

int compare(const void *first, const void *second)
{
	if (*(int*)first > *(int*)second)
		return 1;
	else if (*(int*)first < *(int*)second)
		return -1;
	else
		return 0;
}

---------------------------------------
2016년 1학기 STL
Wed Mar  9 10:47:02 2016
---------------------------------------

#include <iostream>
#include <stdlib.h>
#include "save.h"
using namespace std;

#define MAX_COUNT 10

int f(const void* a, const void* b) {
	int x = *(int*)a;
	int y = *(int*)b;
	if (x > y)
		return 1;
	if (x < y)
		return -1;
	return 0;
}
int compare(const void *first, const void *second);

int main() {
	int a[] = { 2, 4, 6, 8, 10, 1, 3, 5, 7, 9 };

	// c함수 qsort를 이용하여 a를 정렬하시오.

	// 지금 test를 main() 안에서 선안한 후 qsort로 넘겨봐라
	/*
	int f(const void*, const void*);
	*/
	//int(*test)(const void*, const void*) = f; // 함수 포인터!
	auto test = f; // 위와 똑같은 방식.


	qsort(a, 10, 4, test);
	//qsort(a, MAX_COUNT, sizeof(a[0]), compare);

	for (auto d : a)
		cout << d << " "; // 오름차순 정렬
	cout << endl;
	save();
}

int compare(const void *first, const void *second)
{
	if (*(int*)first > *(int*)second)
		return 1;
	else if (*(int*)first < *(int*)second)
		return -1;
	else
		return 0;
}

---------------------------------------
2016년 1학기 STL
Wed Mar  9 10:53:42 2016
---------------------------------------

//---------------------------------------------------------------------------
// 정렬, 랜덤 넘버 생성
// 많은수의 램덤 정렬 
//---------------------------------------------------------------------------
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include "save.h"
using namespace std;

int f(const void* a, const void* b) {
	int x = *(int*)a;
	int y = *(int*)b;
	if (x > y)
		return 1;
	if (x < y)
		return -1;
	return 0;
}
int compare(const void *first, const void *second);

int main() {
	int a[10000];
	srand((unsigned int)time(NULL));

	/*
	for (int i = 0; i < 10000; ++i) {
		// a의 값을 임의의 정수로 채워라.
		a[i] = rand()+10000;
	}
	*/

	for (auto& d : a) {
		d = rand() + 10000;
	}

	qsort(a, 10000, 4, f);
	//qsort(a, MAX_COUNT, sizeof(a[0]), compare);

	for (auto d : a)
		cout << d << " "; // 오름차순 정렬
	cout << endl;
	save();
}

int compare(const void *first, const void *second)
{
	if (*(int*)first > *(int*)second)
		return 1;
	else if (*(int*)first < *(int*)second)
		return -1;
	else
		return 0;
}

---------------------------------------
2016년 1학기 STL
Wed Mar  9 11:08:13 2016
---------------------------------------

//---------------------------------------------------------------------------
// 정렬, 랜덤 넘버 생성
// 많은수의 정수를 정렬해 보자
// c++11의 난수를 사용하자 (C++표준라이브러리 17장 987쪽)
//---------------------------------------------------------------------------
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include<random>
#include "save.h"
using namespace std;

int f(const void* a, const void* b) {
	int x = *(int*)a;
	int y = *(int*)b;
	if (x > y)
		return 1;
	if (x < y)
		return -1;
	return 0;
}
int compare(const void *first, const void *second);

int main() {
	int a[1000];
	srand((unsigned int)time(NULL));

	/*
	for (int i = 0; i < 10000; ++i) {
		// a의 값을 임의의 정수로 채워라.
		a[i] = rand()+10000;
	}
	*/


	// c++11 랜덤
	// 난수생성 엔진과 난수확률분포를 사용하여 생성한다.
	default_random_engine dre;	// 기본 엔진 사용
	normal_distribution<> nd(0, 99);
	uniform_int_distribution<>ui(-100,100);	// 고르게 분포


	for (auto& d : a) {
		d = ui(dre);
	}

	qsort(a, 1000, 4, f);
	//qsort(a, MAX_COUNT, sizeof(a[0]), compare);

	for (auto d : a)
		cout << d << " "; // 오름차순 정렬
	cout << endl;
	save();
}

int compare(const void *first, const void *second)
{
	if (*(int*)first > *(int*)second)
		return 1;
	else if (*(int*)first < *(int*)second)
		return -1;
	else
		return 0;
}

---------------------------------------
2016년 1학기 STL
Wed Mar  9 11:19:12 2016
---------------------------------------

//---------------------------------------------------------------------------
// 정렬, 랜덤 넘버 생성
// 많은수의 정수를 정렬해 보자
// c++11의 난수를 사용하자 (C++표준라이브러리 17장 987쪽)
//---------------------------------------------------------------------------
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include<random>
#include "save.h"
using namespace std;

int f(const void* a, const void* b) {
	int x = *(int*)a;
	int y = *(int*)b;
	if (x > y)
		return 1;
	if (x < y)
		return -1;
	return 0;
}
int compare(const void *first, const void *second);

int main() {
	// int a[1000000];	// 스택의 한계가 있어서.
	int* a = new int[1000000];		// 큰데이터는 heap에서 저장한다

	srand((unsigned int)time(NULL));

	/*
	for (int i = 0; i < 10000; ++i) {
		// a의 값을 임의의 정수로 채워라.
		a[i] = rand()+10000;
	}
	*/

	// c++11 랜덤
	// 난수생성 엔진과 난수확률분포를 사용하여 생성한다.
	default_random_engine dre;	// 기본 엔진 사용
	normal_distribution<> nd(0, 99);
	uniform_int_distribution<>ui(-1000000,1000000);	// 고르게 분포

	/*
	for (auto& d : a) {
		d = ui(dre);
	}
	*/
	for (int i = 0; i < 1000000; ++i) {
		a[i] = ui(dre);
	}

	qsort(a, 1000000, 4, f);
	//qsort(a, MAX_COUNT, sizeof(a[0]), compare);
	/*
	for (auto d : a)
		cout << d << " "; // 오름차순 정렬
	cout << endl;
	*/

	save();

	for (int i = 0; i < 1000000; ++i) 
		cout << a[i] << " ";
	cout << endl;
	

	
}

int compare(const void *first, const void *second)
{
	if (*(int*)first > *(int*)second)
		return 1;
	else if (*(int*)first < *(int*)second)
		return -1;
	else
		return 0;
}

---------------------------------------
2016년 1학기 STL
Wed Mar  9 11:19:56 2016
---------------------------------------

//---------------------------------------------------------------------------
// 정렬, 랜덤 넘버 생성
// 많은수의 정수를 정렬해 보자
// c++11의 난수를 사용하자 (C++표준라이브러리 17장 987쪽)
//---------------------------------------------------------------------------
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include<random>
#include "save.h"
using namespace std;

int f(const void* a, const void* b) {
	int x = *(int*)a;
	int y = *(int*)b;
	if (x > y)
		return 1;
	if (x < y)
		return -1;
	return 0;
}
int compare(const void *first, const void *second);

int main() {
	// int a[1000000];	// 스택의 한계가 있어서.
	int* a = new int[1000000];		// 큰데이터는 heap에서 저장한다

	srand((unsigned int)time(NULL));

	/*
	for (int i = 0; i < 10000; ++i) {
		// a의 값을 임의의 정수로 채워라.
		a[i] = rand()+10000;
	}
	*/

	// c++11 랜덤
	// 난수생성 엔진과 난수확률분포를 사용하여 생성한다.
	default_random_engine dre;	// 기본 엔진 사용
	normal_distribution<> nd(0, 99);
	uniform_int_distribution<>ui(-1000000,1000000);	// 고르게 분포

	/*
	for (auto& d : a) {
		d = ui(dre);
	}
	*/
	for (int i = 0; i < 1000000; ++i) {
		a[i] = ui(dre);
	}

	qsort(a, 1000000, 4, f);
	//qsort(a, MAX_COUNT, sizeof(a[0]), compare);
	/*
	for (auto d : a)
		cout << d << " "; // 오름차순 정렬
	cout << endl;
	*/

	save();

	for (int i = 0; i < 1000000; ++i) 
		cout << a[i] << " ";
	cout << endl;
	
	delete[] a; // 소멸자는 필수다!
	
}

int compare(const void *first, const void *second)
{
	if (*(int*)first > *(int*)second)
		return 1;
	else if (*(int*)first < *(int*)second)
		return -1;
	else
		return 0;
}

---------------------------------------
2016년 1학기 STL
Wed Mar  9 11:34:44 2016
---------------------------------------

//---------------------------------------------------------------------------
// 정렬, 랜덤 넘버 생성
// 많은수의 정수를 정렬해 보자
// c++11의 난수를 사용하자 (C++표준라이브러리 17장 987쪽)
//---------------------------------------------------------------------------
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include<random>
#include<fstream>
#include "save.h"
using namespace std;

int f(const void* a, const void* b) {
	int x = *(int*)a;
	int y = *(int*)b;
	if (x > y)
		return 1;
	if (x < y)
		return -1;
	return 0;
}
int compare(const void *first, const void *second);

int main() {
	// int a[1000000];	// 스택의 한계가 있어서.
	int* a = new int[1000000];		// 큰데이터는 heap에서 저장한다

	srand((unsigned int)time(NULL));

	/*
	for (int i = 0; i < 10000; ++i) {
		// a의 값을 임의의 정수로 채워라.
		a[i] = rand()+10000;
	}
	*/

	// c++11 랜덤
	// 난수생성 엔진과 난수확률분포를 사용하여 생성한다.
	default_random_engine dre;	// 기본 엔진 사용
	normal_distribution<> nd(0, 99);
	uniform_int_distribution<>ui(-1000000, 1000000);	// 고르게 분포

	/*
	for (auto& d : a) {
		d = ui(dre);
	}
	*/
	for (int i = 0; i < 1000000; ++i) {
		a[i] = ui(dre);
	}

	qsort(a, 1000000, 4, f);
	//qsort(a, MAX_COUNT, sizeof(a[0]), compare);
	/*
	for (auto d : a)
		cout << d << " "; // 오름차순 정렬
	cout << endl;
	*/

	
	/*
	for (int i = 0; i < 1000000; ++i)
		cout << a[i] << " ";
	cout << endl;
	*/
	// 정렬한 정수를 파일에 저장합니다.

	ofstream out("1000000.txt", ios::app);
	for (int i = 0; i < 1000000; ++i) {
		out << a[i] << " " << endl;
	}

	delete[] a; // 소멸자는 필수다!
	save();
}

int compare(const void *first, const void *second)
{
	if (*(int*)first > *(int*)second)
		return 1;
	else if (*(int*)first < *(int*)second)
		return -1;
	else
		return 0;
}

---------------------------------------
2016년 1학기 STL
Wed Mar  9 11:35:35 2016
---------------------------------------

//---------------------------------------------------------------------------
// 정렬, 랜덤 넘버 생성
// 많은수의 정수를 정렬해 보자
// c++11의 난수를 사용하자 (C++표준라이브러리 17장 987쪽)
//---------------------------------------------------------------------------
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include<random>
#include<fstream>
#include "save.h"
using namespace std;

int f(const void* a, const void* b) {
	int x = *(int*)a;
	int y = *(int*)b;
	if (x > y)
		return 1;
	if (x < y)
		return -1;
	return 0;
}
int compare(const void *first, const void *second);

int main() {
	// int a[1000000];	// 스택의 한계가 있어서.
	int* a = new int[1000000];		// 큰데이터는 heap에서 저장한다

	srand((unsigned int)time(NULL));

	/*
	for (int i = 0; i < 10000; ++i) {
		// a의 값을 임의의 정수로 채워라.
		a[i] = rand()+10000;
	}
	*/

	// c++11 랜덤
	// 난수생성 엔진과 난수확률분포를 사용하여 생성한다.
	default_random_engine dre;	// 기본 엔진 사용
	normal_distribution<> nd(0, 99);
	uniform_int_distribution<>ui(-1000000, 1000000);	// 고르게 분포

	/*
	for (auto& d : a) {
		d = ui(dre);
	}
	*/
	for (int i = 0; i < 1000000; ++i) {
		a[i] = ui(dre);
	}

	qsort(a, 1000000, 4, f);
	//qsort(a, MAX_COUNT, sizeof(a[0]), compare);
	/*
	for (auto d : a)
		cout << d << " "; // 오름차순 정렬
	cout << endl;
	*/

	
	/*
	for (int i = 0; i < 1000000; ++i)
		cout << a[i] << " ";
	cout << endl;
	*/
	// 정렬한 정수를 파일에 저장합니다.

	ofstream out("1000000.txt", ios::app);
	for (int i = 0; i < 1000000; ++i) {
		out << a[i] << " ";
	}
	out << endl;

	delete[] a; // 소멸자는 필수다!
	save();
}

int compare(const void *first, const void *second)
{
	if (*(int*)first > *(int*)second)
		return 1;
	else if (*(int*)first < *(int*)second)
		return -1;
	else
		return 0;
}

---------------------------------------
2016년 1학기 STL
Wed Mar  9 11:47:02 2016
---------------------------------------

//---------------------------------------------------------------------------
// 정렬, 랜덤 넘버 생성
// 많은수의 정수를 정렬해 보자
// c++11의 난수를 사용하자 (C++표준라이브러리 17장 987쪽)
//---------------------------------------------------------------------------
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include<random>
#include<fstream>
#include "save.h"
using namespace std;

int f(const void* a, const void* b) {
	int x = *(int*)a;
	int y = *(int*)b;
	if (x > y)
		return 1;
	if (x < y)
		return -1;
	return 0;
}
int compare(const void *first, const void *second);

int main() {
	// int a[1000000];	// 스택의 한계가 있어서.
	int* a = new int[1000000];		// 큰데이터는 heap에서 저장한다

	srand((unsigned int)time(NULL));

	/*
	for (int i = 0; i < 10000; ++i) {
		// a의 값을 임의의 정수로 채워라.
		a[i] = rand()+10000;
	}
	*/

	// c++11 랜덤
	// 난수생성 엔진과 난수확률분포를 사용하여 생성한다.
	default_random_engine dre;	// 기본 엔진 사용
	normal_distribution<> nd(0, 99);
	uniform_int_distribution<>ui(-1000000, 1000000);	// 고르게 분포

	/*
	for (auto& d : a) {
		d = ui(dre);
	}
	*/
	for (int i = 0; i < 1000000; ++i) {
		a[i] = ui(dre);
	}

	qsort(a, 1000000, 4, f);
	//qsort(a, MAX_COUNT, sizeof(a[0]), compare);
	/*
	for (auto d : a)
		cout << d << " "; // 오름차순 정렬
	cout << endl;
	*/

	
	/*
	for (int i = 0; i < 1000000; ++i)
		cout << a[i] << " ";
	cout << endl;
	*/
	// 정렬한 정수를 파일에 저장합니다.

	// 용량이 실제 저장 데이터보다 커진다.
	// 그이유는 사람이 볼수있는 정수로 변환을 해서 저장을하여 그렇다.
	ofstream out("1000000-data.txt", ios::binary); 
	out.write((const char*)a, sizeof(int) * 1000000);
	// 4백만 바이트보다 큰이유는 무엇인가?
	//텍스트 모드로 불러와서 binary 파일로 변경하면 정화하게 나온다.

	/*
	for (int i = 0; i < 1000000; ++i) {
		out << a[i] << " ";
	}
	out << endl;
	*/
	



	delete[] a; // 소멸자는 필수다!
	save();
}

int compare(const void *first, const void *second)
{
	if (*(int*)first > *(int*)second)
		return 1;
	else if (*(int*)first < *(int*)second)
		return -1;
	else
		return 0;
}

---------------------------------------
2016년 1학기 STL
Wed Mar  9 11:51:21 2016
---------------------------------------

//---------------------------------------------------------------------------
// 정렬, 랜덤 넘버 생성
// 많은수의 정수를 정렬해 보자
// c++11의 난수를 사용하자 (C++표준라이브러리 17장 987쪽)
// 파일에 저장하였다.
// 저장한 정수를 읽어오자
//---------------------------------------------------------------------------
#include <iostream>
#include<fstream>
#include "save.h"
using namespace std;

int main() {
	ifstream in("1000000-data.txt", ios::binary);

	int* a = new int[1000000];

	in.read((char *)a, 1000000);

	for (int i = 0; i < 100; ++i) {
		cout << a[i] << " ";
	}
	cout << endl;

	delete[] a;
	save();
}
---------------------------------------
2016년 1학기 STL
Wed Mar  9 12:08:36 2016
---------------------------------------

//---------------------------------------------------------------------------
// 정렬, 랜덤 넘버 생성
// 많은수의 정수를 정렬해 보자
// c++11의 난수를 사용하자 (C++표준라이브러리 17장 987쪽)
// 파일에 저장하였다.
// 저장한 정수를 읽어오자
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include <functional>         // greater 사용 위해 필요  
#include "save.h"
using namespace std;

int main() {
	int a[] = { 10, 9, 7, 8, 6, 5, 4, 3, 2, 1 };

	// C++ 에서는 a를 다음과 같이 정렬한다.
	sort(a, a + 10);
	// 내림차순 정렬
	sort(a, a+10, greater<int>());

	for (int d : a)
		cout << d << " ";
	cout << endl;

	save();
}
---------------------------------------
2016년 1학기 STL
Wed Mar  9 12:10:14 2016
---------------------------------------

//---------------------------------------------------------------------------
// 정렬, 랜덤 넘버 생성
// 많은수의 정수를 정렬해 보자
// c++11의 난수를 사용하자 (C++표준라이브러리 17장 987쪽)
// 파일에 저장하였다.
// 저장한 정수를 읽어오자
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include <functional>         // greater 사용 위해 필요  
#include "save.h"
using namespace std;

int f(int a, int b) {
	return a > b;
}

int main() {
	int a[] = { 10, 9, 7, 8, 6, 5, 4, 3, 2, 1 };

	// C++ 에서는 a를 다음과 같이 정렬한다.
	sort(a, a + 10);
	// 내림차순 정렬
	sort(a, a + 10, f);

	for (int d : a)
		cout << d << " ";
	cout << endl;

	save();
}
---------------------------------------
2016년 1학기 STL
Wed Mar  9 12:12:23 2016
---------------------------------------

//---------------------------------------------------------------------------
// 정렬, 랜덤 넘버 생성
// 많은수의 정수를 정렬해 보자
// c++11의 난수를 사용하자 (C++표준라이브러리 17장 987쪽)
// 파일에 저장하였다.
// 저장한 정수를 읽어오자
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include <functional>         // greater 사용 위해 필요  
#include "save.h"
using namespace std;

int main() {
	int a[] = { 10, 9, 7, 8, 6, 5, 4, 3, 2, 1 };

	// C++ 에서는 a를 다음과 같이 정렬한다.
	sort(a, a + 10);
	// 내림차순 정렬
	sort(a, a + 10, [](int a, int b) {
		return a > b;
	});

	for (int d : a)
		cout << d << " ";
	cout << endl;

	save();
}