
---------------------------------------
2016년 1학기 STL
Mon Mar 14 10:49:12 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 03월 14일
//qsort(a, 6, 4, cmp); // generic
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include "save.h"
using namespace std;

bool f(int a, int b)
{
	return a > b; //내림차순
}

int main() {
	//STL의 대표 정렬 알고리즘 sort
	int a[]{ 2, 4, 6, 1, 3, 5 };
	
	sort(&a[0], &a[6], f);

	for (auto d : a)
		cout << d << " ";
	cout << endl;

	save();
}
---------------------------------------
2016년 1학기 STL
Mon Mar 14 10:51:43 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 03월 14일
//qsort(a, 6, 4, cmp); // generic
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include "save.h"
using namespace std;

//bool f(int a, int b)
//{
//	return a > b; //내림차순
//}
// 람다를 이용하여 sort 함수 안에다가 작업하기.

int main() {
	//STL의 대표 정렬 알고리즘 sort
	int a[]{ 2, 4, 6, 1, 3, 5 };
	
	sort(&a[0], &a[6], [](int a, int b){
		return a > b;
	});

	for (auto d : a)
		cout << d << " ";
	cout << endl;

	save();
}
---------------------------------------
2016년 1학기 STL
Mon Mar 14 10:52:30 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 03월 14일
//qsort(a, 6, 4, cmp); // generic
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include "save.h"
using namespace std;

//bool f(int a, int b)
//{
//	return a > b; //내림차순
//}
// 람다를 이용하여 sort 함수 안에다가 작업하기.

int main() {
	//STL의 대표 정렬 알고리즘 sort
	int a[]{ 2, 4, 6, 1, 3, 5 };
	
	sort(begin(a), end(a), [](int a, int b){
		return a > b;
	});

	for (auto d : a)
		cout << d << " ";
	cout << endl;

	save();
}
---------------------------------------
2016년 1학기 STL
Mon Mar 14 10:54:05 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 03월 14일
//qsort(a, 6, 4, cmp); // generic
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include "save.h"
using namespace std;

//bool f(int a, int b)
//{
//	return a > b; //내림차순
//}
// 람다를 이용하여 sort 함수 안에다가 작업하기.

int main() {
	//STL의 대표 정렬 알고리즘 sort
	int a[]{ 2, 4, 6, 1, 3, 5 };

	sort(begin(a), end(a), [](int a, int b) -> bool {
		// 람다 앞에 사용을 할수 없으므로 "-> bool" 을 쓴다.
		return a > b;
	});

	for (auto d : a)
		cout << d << " ";
	cout << endl;

	save();
}
---------------------------------------
2016년 1학기 STL
Mon Mar 14 10:55:16 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 03월 14일
//qsort(a, 6, 4, cmp); // generic
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include "save.h"
using namespace std;

//bool f(int a, int b)
//{
//	return a > b; //내림차순
//}
// 람다를 이용하여 sort 함수 안에다가 작업하기.

auto sum(int a, int b) -> int
{
	// 이렇게도 가능하다.
	// 템플릿 코드에서 사용할수있다 무슨 반환을 할지 모를경우 자주 사용.
	return false;
}

int main() {
	//STL의 대표 정렬 알고리즘 sort
	int a[]{ 2, 4, 6, 1, 3, 5 };

	sort(begin(a), end(a), [](int a, int b) -> bool {
		// 람다 앞에 사용을 할수 없으므로 "-> bool" 을 쓴다.
		return a > b;
	});

	for (auto d : a)
		cout << d << " ";
	cout << endl;

	save();
}
---------------------------------------
2016년 1학기 STL
Mon Mar 14 11:33:12 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 03월 14일
//qsort(a, 6, 4, cmp); // generic
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include<string>
#include "save.h"
using namespace std;

class Wizard {
	string name;
	int num;
public:
	Wizard(const char * name, int num) : name(name), num(num) {}
	string getName() const { // const를 쓰는이유는 이름이 변경되지 않게 하기 위하여.
		return name;
	}
	int getNum() const {
		return num;
	}

};


int main() {
	// 정렬 방식 숫자 -> a,b  -> 가나다 ( 아스키 순서)
	Wizard a[]{ {"3월", 14}, {"2월", 29}, {"4월", 1} };	//유니폼 이니셜 라이저
	// a[] = 을 안쓰는게 표준 위에 작성한것이 표준이다.


	sort(begin(a), end(a), [](const Wizard& a, const Wizard& b) {
		// 이름순
		// 읽기만 하고 복사를 방지하기 위하여 const 를 쓰고 &레퍼런스 작성.
		return a.getName() < b.getName();
	});

	sort(begin(a), end(a), [](const Wizard& a, const Wizard& b) {
		// 숫자순
		return a.getNum() < b.getNum();
	});


	for (auto d : a)
		cout << d.getName() << " ";
	cout << endl;

	save();
}
---------------------------------------
2016년 1학기 STL
Mon Mar 14 12:16:38 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 03월 14일
// 새 언어 특성
// auto, 일관된 초기화, 범위기반의 for loop
// 이동문맥과 r-value 참조 ( 클래스 전체 복습 실습 )
// 람다
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include "save.h"
using namespace std;


int main() {
	// 다이나믹 = 어떤 결정이 바뀔수 있다.
	vector<string> v{ "오늘은", "3월", "14일", "입니다." };

	for (auto i = v.begin(); i < v.end(); ++i)
		cout << *i << endl;

	v.push_back("언제든지");
	v.push_back("추가");
	v.push_back("가능하다.");

	vector<string>::const_iterator i = v.begin();
	for (; i < v.end(); ++i)
		cout << *i << endl;
	save();
}
---------------------------------------
2016년 1학기 STL
Mon Mar 14 12:19:27 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 03월 14일
// 새 언어 특성
// auto, 일관된 초기화, 범위기반의 for loop
// 이동문맥과 r-value 참조 ( 클래스 전체 복습 실습 )
// 람다
//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include "save.h"
using namespace std;


int main() {
	// 49쪽 2번째줄
	// 한정자(qualifier) -> 한정사

	int a{ 100 };
	volatile int b{ a };		// const가 한정사임.


	save();
}