
---------------------------------------
2016년 1학기 STL
Mon Apr  4 11:37:09 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 04월 04일
//
// 5장
// pair<>, 스마트 포인터, type traits
//
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include<functional> // bind 함수를 쓰기위해서
#include <vector>
#include <utility> // pair 사용할때
#include<random>
#include <string>
#include <memory> // unique_ptr or shared_ptr 사용시 사용
#include "save.h"

using namespace std;

// 스마트 포인터
//	자신의 획득한 자원을 자신이 소멸될때 해제해 주는 포인터
// c++ 11에서는
// unique_ptr - 자원을 독점하는 포인터
// shared_ptr - 자원을 공유하는 포인터


// 포인터 
// 1. 자원을 획득한다(HEAP)
// 2. 자원을 이용한다
// 3. 반환한다.

class Mini {
public:
	Mini() {
		cout << "ctor(생성자)" << endl;
	}
	~Mini() {
		cout << "dtor(소멸자)" << endl;
	}
	void f() {
		cout << "member(맴버)" << endl;
	}
};

int main() {
	//-------------------------------------------------------------
	/*
	Mini * m = new Mini;
	//unique_ptr<Mini> p(new Mini);
	unique_ptr<Mini> p(m);

	// 뭔가 
	unique_ptr<Mini> q;
	q = move(p);
	*/
	//-------------------------------------------------------------
	shared_ptr<Mini>p(new Mini);
	shared_ptr<Mini> q = p;
	shared_ptr<Mini> r = q;
	shared_ptr<Mini> s = r;
	shared_ptr<Mini> t = s;

	s.reset();
	cout << p.use_count() << endl;
	save();
}
---------------------------------------
2016년 1학기 STL
Mon Apr  4 11:42:45 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 04월 04일
//
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include<functional> // bind 함수를 쓰기위해서
#include <vector>
#include <utility> // pair 사용할때
#include<random>
#include <string>
#include <memory> // unique_ptr or shared_ptr 사용시 사용
#include "save.h"

using namespace std;

// 5.3 nimeric_limits


int main() {
	int n = 0x7fffffff;
	cout << "정수 가장 큰 값 : " << n << endl;
	save();
}
---------------------------------------
2016년 1학기 STL
Mon Apr  4 12:07:40 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 04월 04일
//
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include<functional> // bind 함수를 쓰기위해서
#include <vector>
#include <utility> // pair 사용할때
#include<random>
#include <string>
#include <memory> // unique_ptr or shared_ptr 사용시 사용
#include "save.h"

using namespace std;

// 5.4 type traits

// 탬플릿 코드에서는 전달된 인자의 타입을 구분할 필요가 있다.
// 인자의 타입을 구분하기 위해
// 168Page에 저장되어있다.

template <class T>
void f(T t) {
	if (is_pointer<T>()) {
		cout << "포인터가 전달됨" << endl;
	}
	if (is_integral<T>())
		cout << "정수형 타입이 전달됨" << endl;
}

int main() {
	// 어떤 함수가 있는데 넘겨주는 값이 포인터이면 그 것이 가리키는 값을,
	// 그냥 값이라면 그 값을 출력하는 함수를 작성하고 싶다.
	int n{ 100 };
	int* p{ &n };


	f(n);
	f(p);
	save();
}
---------------------------------------
2016년 1학기 STL
Mon Apr  4 12:11:09 2016
---------------------------------------

//---------------------------------------------------------------------------
// 2016년 04월 04일
//
//---------------------------------------------------------------------------
#include <iostream>
#include<algorithm>
#include<functional> // bind 함수를 쓰기위해서
#include <vector>
#include <utility> // pair 사용할때
#include<random>
#include <string>
#include <memory> // unique_ptr or shared_ptr 사용시 사용
#include "save.h"

using namespace std;

// 5.4 type traits

// 탬플릿 코드에서는 전달된 인자의 타입을 구분할 필요가 있다.
// 인자의 타입을 구분하기 위해
// 168Page에 저장되어있다.


template <class T>void f(T t) {
	f(t, is_pointer<T>());
}

template<class T>
void f(T t, true_type) {
	cout << "포인터 전달 (가리키는 값) - " << *t << endl;
}

template<class T>
void f(T t, false_type) {
	cout << "값이 전달 - " << t << endl;
}

int main() {
	// 어떤 함수가 있는데 넘겨주는 값이 포인터이면 그 것이 가리키는 값을,
	// 그냥 값이라면 그 값을 출력하는 함수를 작성하고 싶다.
	int n{ 100 };
	int* p{ &n };


	f(n);
	f(p);
	save();
}